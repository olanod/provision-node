#!/bin/bash
set -e

pacman -Syu --noconfirm rxvt-unicode-terminfo bash-completion btrfs-progs jq arch-install-scripts

# prepare external disk to hold blockchain data
DISK=/dev/sdc # TODO detect in a smart way
mkfs.btrfs -f -L machines $DISK
mkdir /btrfs && mount $DISK /btrfs

create_mount() {
	name=`[[ $1 == /* ]] && echo ${1:1} || echo $1`
	name=${name//\//-}
	svol=`basename $1`

	cat <<EOF > /etc/systemd/system/$name.mount
[Unit]
Description=$svol storage

[Mount]
What=$DISK
Where=$1
Type=btrfs
Options=subvol=$svol
EOF

	btrfs subvolume create /btrfs/$svol
	systemctl daemon-reload
	systemctl enable $name.mount
	systemctl start $name.mount
}

create_mount /var/lib/machines
create_mount /var/lib/chain
create_mount /root/releases

# create base images for single binary container
btrfs subvolume create /var/lib/machines/empty
pacstrap -c /var/lib/machines/empty filesystem
machinectl read-only empty
# for dynamic linked rust binaries
machinectl clone empty glibc
pacstrap -c /var/lib/machines/glibc glibc gcc-libs zlib
machinectl read-only glibc

cat <<\EOF > /usr/local/bin/node_fetch
#!/bin/bash
set -e
repo=${1:-valibre-org/node}
json=`curl -fsL https://api.github.com/repos/$repo/releases/latest`
url=`echo $json | jq -r '.assets[0].browser_download_url'`
ver=`echo $json | jq -r .tag_name`

mkdir -p ~/releases/$ver
curl -fsL $url > ~/releases/$ver/node
chmod +x ~/releases/$ver/node
echo $ver > ~/releases/latest
EOF

cat <<\EOF > /usr/local/bin/node_enable
#!/bin/bash
set -e
base=glibc
ver=`cat /root/releases/latest`
chain_data=/var/lib/chain
machinectl clone $base node-$ver

mkdir -p /etc/systemd/nspawn
cat <<__END > /etc/systemd/nspawn/node-$ver.nspawn
[Exec]
ProcessTwo=yes
Parameters=/bin/node --base-path $chain_data --alice --validator
[Files]
Bind=/root/releases/$ver/node:/bin/node
Bind=$chain_data
[Network]
Port=30333
Port=80:9944
__END

# machinectl enable node-$ver
EOF

chmod +x /usr/local/bin/node_fetch
chmod +x /usr/local/bin/node_enable

reboot
